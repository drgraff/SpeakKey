// Generated by view binder compiler. Do not edit!
package com.drgraff.speakkey.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.drgraff.speakkey.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentMainBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnClearChatgpt;

  @NonNull
  public final Button btnClearRecording;

  @NonNull
  public final Button btnClearTranscription;

  @NonNull
  public final Button btnPauseRecording;

  @NonNull
  public final Button btnSendChatgpt;

  @NonNull
  public final Button btnSendInputstick;

  @NonNull
  public final Button btnSendWhisper;

  @NonNull
  public final Button btnStartRecording;

  @NonNull
  public final Button btnStopRecording;

  @NonNull
  public final LinearLayout chatgptControls;

  @NonNull
  public final TextView chatgptLabel;

  @NonNull
  public final EditText chatgptText;

  @NonNull
  public final CheckBox chkAutoSendInputstick;

  @NonNull
  public final CheckBox chkAutoSendWhisper;

  @NonNull
  public final LinearLayout inputstickControls;

  @NonNull
  public final LinearLayout recordingControls;

  @NonNull
  public final View recordingIndicator;

  @NonNull
  public final LinearLayout recordingIndicatorLayout;

  @NonNull
  public final TextView recordingTime;

  @NonNull
  public final LinearLayout whisperControls;

  @NonNull
  public final TextView whisperLabel;

  @NonNull
  public final EditText whisperText;

  private ContentMainBinding(@NonNull ScrollView rootView, @NonNull Button btnClearChatgpt,
      @NonNull Button btnClearRecording, @NonNull Button btnClearTranscription,
      @NonNull Button btnPauseRecording, @NonNull Button btnSendChatgpt,
      @NonNull Button btnSendInputstick, @NonNull Button btnSendWhisper,
      @NonNull Button btnStartRecording, @NonNull Button btnStopRecording,
      @NonNull LinearLayout chatgptControls, @NonNull TextView chatgptLabel,
      @NonNull EditText chatgptText, @NonNull CheckBox chkAutoSendInputstick,
      @NonNull CheckBox chkAutoSendWhisper, @NonNull LinearLayout inputstickControls,
      @NonNull LinearLayout recordingControls, @NonNull View recordingIndicator,
      @NonNull LinearLayout recordingIndicatorLayout, @NonNull TextView recordingTime,
      @NonNull LinearLayout whisperControls, @NonNull TextView whisperLabel,
      @NonNull EditText whisperText) {
    this.rootView = rootView;
    this.btnClearChatgpt = btnClearChatgpt;
    this.btnClearRecording = btnClearRecording;
    this.btnClearTranscription = btnClearTranscription;
    this.btnPauseRecording = btnPauseRecording;
    this.btnSendChatgpt = btnSendChatgpt;
    this.btnSendInputstick = btnSendInputstick;
    this.btnSendWhisper = btnSendWhisper;
    this.btnStartRecording = btnStartRecording;
    this.btnStopRecording = btnStopRecording;
    this.chatgptControls = chatgptControls;
    this.chatgptLabel = chatgptLabel;
    this.chatgptText = chatgptText;
    this.chkAutoSendInputstick = chkAutoSendInputstick;
    this.chkAutoSendWhisper = chkAutoSendWhisper;
    this.inputstickControls = inputstickControls;
    this.recordingControls = recordingControls;
    this.recordingIndicator = recordingIndicator;
    this.recordingIndicatorLayout = recordingIndicatorLayout;
    this.recordingTime = recordingTime;
    this.whisperControls = whisperControls;
    this.whisperLabel = whisperLabel;
    this.whisperText = whisperText;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_clear_chatgpt;
      Button btnClearChatgpt = ViewBindings.findChildViewById(rootView, id);
      if (btnClearChatgpt == null) {
        break missingId;
      }

      id = R.id.btn_clear_recording;
      Button btnClearRecording = ViewBindings.findChildViewById(rootView, id);
      if (btnClearRecording == null) {
        break missingId;
      }

      id = R.id.btn_clear_transcription;
      Button btnClearTranscription = ViewBindings.findChildViewById(rootView, id);
      if (btnClearTranscription == null) {
        break missingId;
      }

      id = R.id.btn_pause_recording;
      Button btnPauseRecording = ViewBindings.findChildViewById(rootView, id);
      if (btnPauseRecording == null) {
        break missingId;
      }

      id = R.id.btn_send_chatgpt;
      Button btnSendChatgpt = ViewBindings.findChildViewById(rootView, id);
      if (btnSendChatgpt == null) {
        break missingId;
      }

      id = R.id.btn_send_inputstick;
      Button btnSendInputstick = ViewBindings.findChildViewById(rootView, id);
      if (btnSendInputstick == null) {
        break missingId;
      }

      id = R.id.btn_send_whisper;
      Button btnSendWhisper = ViewBindings.findChildViewById(rootView, id);
      if (btnSendWhisper == null) {
        break missingId;
      }

      id = R.id.btn_start_recording;
      Button btnStartRecording = ViewBindings.findChildViewById(rootView, id);
      if (btnStartRecording == null) {
        break missingId;
      }

      id = R.id.btn_stop_recording;
      Button btnStopRecording = ViewBindings.findChildViewById(rootView, id);
      if (btnStopRecording == null) {
        break missingId;
      }

      id = R.id.chatgpt_controls;
      LinearLayout chatgptControls = ViewBindings.findChildViewById(rootView, id);
      if (chatgptControls == null) {
        break missingId;
      }

      id = R.id.chatgpt_label;
      TextView chatgptLabel = ViewBindings.findChildViewById(rootView, id);
      if (chatgptLabel == null) {
        break missingId;
      }

      id = R.id.chatgpt_text;
      EditText chatgptText = ViewBindings.findChildViewById(rootView, id);
      if (chatgptText == null) {
        break missingId;
      }

      id = R.id.chk_auto_send_inputstick;
      CheckBox chkAutoSendInputstick = ViewBindings.findChildViewById(rootView, id);
      if (chkAutoSendInputstick == null) {
        break missingId;
      }

      id = R.id.chk_auto_send_whisper;
      CheckBox chkAutoSendWhisper = ViewBindings.findChildViewById(rootView, id);
      if (chkAutoSendWhisper == null) {
        break missingId;
      }

      id = R.id.inputstick_controls;
      LinearLayout inputstickControls = ViewBindings.findChildViewById(rootView, id);
      if (inputstickControls == null) {
        break missingId;
      }

      id = R.id.recording_controls;
      LinearLayout recordingControls = ViewBindings.findChildViewById(rootView, id);
      if (recordingControls == null) {
        break missingId;
      }

      id = R.id.recording_indicator;
      View recordingIndicator = ViewBindings.findChildViewById(rootView, id);
      if (recordingIndicator == null) {
        break missingId;
      }

      id = R.id.recording_indicator_layout;
      LinearLayout recordingIndicatorLayout = ViewBindings.findChildViewById(rootView, id);
      if (recordingIndicatorLayout == null) {
        break missingId;
      }

      id = R.id.recording_time;
      TextView recordingTime = ViewBindings.findChildViewById(rootView, id);
      if (recordingTime == null) {
        break missingId;
      }

      id = R.id.whisper_controls;
      LinearLayout whisperControls = ViewBindings.findChildViewById(rootView, id);
      if (whisperControls == null) {
        break missingId;
      }

      id = R.id.whisper_label;
      TextView whisperLabel = ViewBindings.findChildViewById(rootView, id);
      if (whisperLabel == null) {
        break missingId;
      }

      id = R.id.whisper_text;
      EditText whisperText = ViewBindings.findChildViewById(rootView, id);
      if (whisperText == null) {
        break missingId;
      }

      return new ContentMainBinding((ScrollView) rootView, btnClearChatgpt, btnClearRecording,
          btnClearTranscription, btnPauseRecording, btnSendChatgpt, btnSendInputstick,
          btnSendWhisper, btnStartRecording, btnStopRecording, chatgptControls, chatgptLabel,
          chatgptText, chkAutoSendInputstick, chkAutoSendWhisper, inputstickControls,
          recordingControls, recordingIndicator, recordingIndicatorLayout, recordingTime,
          whisperControls, whisperLabel, whisperText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
